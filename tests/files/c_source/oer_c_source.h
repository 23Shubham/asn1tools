/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by asn1tools version 0.137.4 Sat Dec 15 18:03:11 2018.
 */

#ifndef OER_C_SOURCE_H
#define OER_C_SOURCE_H

#include <stdint.h>
#include <stdbool.h>
#include <unistd.h>

#ifndef EINVAL
#    define EINVAL -22
#endif

struct c_source_a_t {
};

struct programming_types_bool_t {
};

struct programming_types_bytes_t {
};

struct programming_types_double_t {
};

struct programming_types_float_t {
};

struct programming_types_int16_t {
};

struct programming_types_int32_t {
};

struct programming_types_int64_t {
};

struct programming_types_int8_t {
};

struct programming_types_string_t {
};

struct programming_types_uint16_t {
};

struct programming_types_uint32_t {
};

struct programming_types_uint64_t {
};

struct programming_types_uint8_t {
};

ssize_t c_source_a_encode(
    uint8_t *dsp_t,
    size_t size,
    struct c_source_a_t *src_p);

ssize_t c_source_a_decode(
    struct c_source_a_t *dsp_t,
    uint8_t *src_p,
    size_t size);

ssize_t programming_types_bool_encode(
    uint8_t *dsp_t,
    size_t size,
    struct programming_types_bool_t *src_p);

ssize_t programming_types_bool_decode(
    struct programming_types_bool_t *dsp_t,
    uint8_t *src_p,
    size_t size);

ssize_t programming_types_bytes_encode(
    uint8_t *dsp_t,
    size_t size,
    struct programming_types_bytes_t *src_p);

ssize_t programming_types_bytes_decode(
    struct programming_types_bytes_t *dsp_t,
    uint8_t *src_p,
    size_t size);

ssize_t programming_types_double_encode(
    uint8_t *dsp_t,
    size_t size,
    struct programming_types_double_t *src_p);

ssize_t programming_types_double_decode(
    struct programming_types_double_t *dsp_t,
    uint8_t *src_p,
    size_t size);

ssize_t programming_types_float_encode(
    uint8_t *dsp_t,
    size_t size,
    struct programming_types_float_t *src_p);

ssize_t programming_types_float_decode(
    struct programming_types_float_t *dsp_t,
    uint8_t *src_p,
    size_t size);

ssize_t programming_types_int16_encode(
    uint8_t *dsp_t,
    size_t size,
    struct programming_types_int16_t *src_p);

ssize_t programming_types_int16_decode(
    struct programming_types_int16_t *dsp_t,
    uint8_t *src_p,
    size_t size);

ssize_t programming_types_int32_encode(
    uint8_t *dsp_t,
    size_t size,
    struct programming_types_int32_t *src_p);

ssize_t programming_types_int32_decode(
    struct programming_types_int32_t *dsp_t,
    uint8_t *src_p,
    size_t size);

ssize_t programming_types_int64_encode(
    uint8_t *dsp_t,
    size_t size,
    struct programming_types_int64_t *src_p);

ssize_t programming_types_int64_decode(
    struct programming_types_int64_t *dsp_t,
    uint8_t *src_p,
    size_t size);

ssize_t programming_types_int8_encode(
    uint8_t *dsp_t,
    size_t size,
    struct programming_types_int8_t *src_p);

ssize_t programming_types_int8_decode(
    struct programming_types_int8_t *dsp_t,
    uint8_t *src_p,
    size_t size);

ssize_t programming_types_string_encode(
    uint8_t *dsp_t,
    size_t size,
    struct programming_types_string_t *src_p);

ssize_t programming_types_string_decode(
    struct programming_types_string_t *dsp_t,
    uint8_t *src_p,
    size_t size);

ssize_t programming_types_uint16_encode(
    uint8_t *dsp_t,
    size_t size,
    struct programming_types_uint16_t *src_p);

ssize_t programming_types_uint16_decode(
    struct programming_types_uint16_t *dsp_t,
    uint8_t *src_p,
    size_t size);

ssize_t programming_types_uint32_encode(
    uint8_t *dsp_t,
    size_t size,
    struct programming_types_uint32_t *src_p);

ssize_t programming_types_uint32_decode(
    struct programming_types_uint32_t *dsp_t,
    uint8_t *src_p,
    size_t size);

ssize_t programming_types_uint64_encode(
    uint8_t *dsp_t,
    size_t size,
    struct programming_types_uint64_t *src_p);

ssize_t programming_types_uint64_decode(
    struct programming_types_uint64_t *dsp_t,
    uint8_t *src_p,
    size_t size);

ssize_t programming_types_uint8_encode(
    uint8_t *dsp_t,
    size_t size,
    struct programming_types_uint8_t *src_p);

ssize_t programming_types_uint8_decode(
    struct programming_types_uint8_t *dsp_t,
    uint8_t *src_p,
    size_t size);

#endif
